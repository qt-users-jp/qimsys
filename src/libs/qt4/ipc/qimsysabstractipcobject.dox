/*!
    \class QimsysAbstractIpcObject
    \brief The QimsysAbstractIpcObject class provides facilities for implementing the client and server sides of IPC communications paths.

    This class makes it easier to implement IPC mechanisms in qimsys.

    \sa \ref subclass-qimsysabstractipcobject
 */

/*!
    \enum QimsysAbstractIpcObject::Type
    \brief Type of instance.
 */

/*!
    \var QimsysAbstractIpcObject::Server
    \brief is used for server instance
 */

/*!
    \var QimsysAbstractIpcObject::Client
    \brief is used for client instance
 */

/*!
    \fn QimsysAbstractIpcObject::QimsysAbstractIpcObject(QObject *parent=0, Type type=Client)
    \brief Constructor
 */

/*!
    \fn QimsysAbstractIpcObject::~QimsysAbstractIpcObject()
    \brief Destructor
 */

/*!
    \fn void QimsysAbstractIpcObject::init()
    \brief Initialize object

    Make sure to call init() for every instance.
 */

/*!
    \fn Type QimsysAbstractIpcObject::type() const
    \brief Object Type

    \retval QimsysAbstractIpcObject::Server
    \retval QimsysAbstractIpcObject::Client
 */

/*!
    \fn bool QimsysAbstractIpcObject::hasError() const
    \brief returns if an instance has error.
 */

/*!
    \fn QimsysAbstractIpcObject *QimsysAbstractIpcObject::server() const
    \brief returns server instance.

    \sa QimsysAbstractIpcObject::Server
    \sa \ref subclass-qimsysabstractipcobject
 */

/*!
    \fn QObject *QimsysAbstractIpcObject::proxy() const
    \brief Proxy object

    This method returns
    \li QObject that server() returns if the server instance is in the same process
    \li QDBusInterface if the server instance is out of the process

    In both way, subclass can use the object to get/set properties and to connect signals/slots.

    \sa \ref subclass-qimsysabstractipcobject
 */
